{% extends 'base.html.twig' %}

{% block title %}Mes n√©gociations - MatchRoom{% endblock %}

{% block body %}
<div class="min-h-screen flex flex-col">
    {% include 'partials/_navbar.html.twig' %}

    <div class="container mx-auto px-4 py-10">
        <div class="max-w-6xl mx-auto bg-white rounded-lg shadow-md overflow-hidden">
            <div class="bg-primary-500 text-white p-6">
                <h1 class="text-2xl font-serif font-bold">Mes n√©gociations clients</h1>
            </div>

            <div class="p-6">
                {% if roomTypes is empty %}
                    <div class="text-center py-12">
                        <svg class="mx-auto h-12 w-12 text-primary-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6 1a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <h3 class="mt-2 text-sm font-medium text-primary-900">Aucune chambre trouv√©e</h3>
                        <p class="mt-1 text-sm text-primary-500">Ajoutez une chambre pour recevoir des n√©gociations.</p>
                    </div>
                {% else %}
                    <div class="flex flex-wrap gap-3 mb-6">
                        {% for room in roomTypes %}
                            <button class="tab-button bg-primary-700 text-white px-4 py-2 rounded" data-tab="room-{{ room.id }}">
                                {{ room.name }}
                            </button>
                        {% endfor %}
                    </div>

                    {% for room in roomTypes %}
                        <div class="tab-content" data-tab="room-{{ room.id }}">
                            {% set negotiations = groupedNegotiations[room.id].negotiations ?? [] %}

                            {% if negotiations is empty %}
                                <p class="text-gray-500 italic">Aucune n√©gociation dans cette section.</p>
                            {% else %}
                                {% for negotiation in negotiations %}
                                    <div id="negotiation-{{ negotiation.id }}" class="negotiation-item mb-6 p-4 border border-primary-100 rounded-lg bg-primary-50 shadow-sm">
                                        <p class="text-sm text-primary-900"><strong>Dates :</strong> {{ negotiation.startDate|date('d/m/Y') }} ‚Üí {{ negotiation.endDate|date('d/m/Y') }}</p>
                                        <p class="text-sm text-primary-900"><strong>Proposition :</strong> <span class="text-primary-600 font-semibold">{{ negotiation.proposedPrice }} ‚Ç¨</span></p>
                                        <p class="text-xs text-primary-500">Envoy√©e le {{ negotiation.createdAt|date('d/m/Y H:i') }}</p>

                                        {% if negotiation.status == 'pending' %}
                                            <div class="flex gap-3 mt-4">
                                                <button class="btn-respond bg-green-600 text-white px-4 py-2 rounded text-sm" data-id="{{ negotiation.id }}" data-action="accept">
                                                    ‚úÖ Accepter
                                                </button>
                                                <button class="btn-respond bg-red-600 text-white px-4 py-2 rounded text-sm" data-id="{{ negotiation.id }}" data-action="reject">
                                                    ‚ùå Refuser
                                                </button>
                                            </div>

                                            <div class="mt-4">
                                                <label class="block text-sm font-medium text-primary-700 mb-1">Faire une contre-offre</label>
                                                <div class="flex gap-2">
                                                    <input type="number" class="counter-input border border-primary-300 rounded-md px-3 py-2 text-sm w-full" id="counter-{{ negotiation.id }}" placeholder="Ex: 95.00">
                                                    <button class="btn-counter bg-blue-600 text-white px-4 py-2 rounded text-sm" data-id="{{ negotiation.id }}">
                                                        üîÅ Proposer
                                                    </button>
                                                </div>
                                            </div>
                                        {% else %}
                                            <div class="mt-4 text-sm text-primary-600 italic">
                                                R√©ponse envoy√©e : <strong>{{ negotiation.hotelResponse }}</strong><br>
                                                <span class="text-xs text-primary-400">Le {{ negotiation.respondedAt|date('d/m/Y H:i') }}</span>
                                            </div>
                                        {% endif %}
                                    </div>
                                {% endfor %}
                            {% endif %}
                        </div>
                    {% endfor %}
                {% endif %}
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>

<script>
document.addEventListener("DOMContentLoaded", () => {
    const tabs = document.querySelectorAll(".tab-button");
    const contents = document.querySelectorAll(".tab-content");

    const showTab = (tab) => {
        contents.forEach(c => c.classList.add("hidden"));
        tabs.forEach(t => t.classList.remove("bg-primary-700", "text-white"));
        document.querySelector(`.tab-content[data-tab="${tab}"]`).classList.remove("hidden");
        document.querySelector(`.tab-button[data-tab="${tab}"]`).classList.add("bg-primary-700", "text-white");
    };

    if (tabs.length > 0) showTab(tabs[0].dataset.tab);
    tabs.forEach(tab => tab.addEventListener("click", () => showTab(tab.dataset.tab)));

    // Actions Accepter / Refuser
    document.querySelectorAll('.btn-respond').forEach(btn => {
        btn.addEventListener('click', async () => {
            const id = btn.dataset.id;
            const action = btn.dataset.action;
            await sendNegotiation(id, action);
        });
    });

    // Contre-offre
    document.querySelectorAll('.btn-counter').forEach(btn => {
        btn.addEventListener('click', async () => {
            const id = btn.dataset.id;
            const input = document.getElementById('counter-' + id);
            if (!input.value || isNaN(input.value)) {
                alert("Veuillez entrer un prix valide.");
                return;
            }
            await sendNegotiation(id, 'counter', input.value);
        });
    });

    async function sendNegotiation(id, action, price = null) {
        try {
            const params = new URLSearchParams();
            params.append('action', action);
            if (price !== null) params.append('counter_offer_price', price);

            const response = await fetch(`/negotiation/respond/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'X-Requested-With': 'XMLHttpRequest'
                },
                body: params
            });

            if (!response.ok) throw new Error('Erreur serveur');
            const result = await response.json();

            const container = document.getElementById('negotiation-' + id);
            if (result.success && container) {
                container.innerHTML = `
                    <div class="mt-4 text-sm text-primary-600 italic">
                        R√©ponse envoy√©e : <strong>${result.message ?? result.status}</strong><br>
                        <span class="text-xs text-primary-400">Juste maintenant</span>
                    </div>`;
            }
        } catch (e) {
            console.error(e);
            alert("Erreur d‚Äôenvoi.");
        }
    }

    // Mercure temps r√©el
    const url = new URL('/.well-known/mercure', window.location.origin);
    url.searchParams.append('topic', 'hotel/{{ app.user.id }}/negotiations');
    const eventSource = new EventSource(url);

    eventSource.onmessage = (event) => {
        const data = JSON.parse(event.data);
        console.log("üîî Mercure update :", data);

        if (data.type === 'new_negotiation') {
            location.reload();
        }
    };
});
</script>
{% endblock %}
